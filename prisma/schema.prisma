// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url = env("DATABASE_URL") // uses connection pooling
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}



model User {
    id            String    @id @default(cuid())
    name          String
    email         String    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    categories    String[] @default(["entertainment", "productivity", "finance"])
    collections   Collection[]
    subscriptions Subscription[]
    todoistAPIKey String @default("")
    todoistProjectId String @default("")
}

model Collection {
    id              String @id @default(cuid())
    title           String
    subscriptions   Subscription[]

    user            User @relation(fields: [userId], references: [id])
    userId          String
}

model Subscription {
    id              String @id @default(cuid())
    name            String
    amount          Float
    frequency       String
    category        String
    next_invoice    DateTime
    last_invoice    DateTime?
    icon_ref        String @default("default")
    send_alert      Boolean @default(true)

    collection    Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
    collectionId  String

    user   User @relation(fields: [userId], references: [id])
    userId String
}
